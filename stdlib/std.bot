(define nil
  "Equivalent to an empty list."
  '())

(define nil?
  "Returns true if argument is nil."
  (lambda (x) (= nil x)))

(define identity
  "Returns what is passed in."
  (lambda (x) x))

(define list
  "Takes variadic arguments that are returned wrapped in a list."
  (lambda (... args) args))

; "Checks if the type of the first argument is equal to the string passed as a second arg."
; (define type? (lambda (var type) (equal? (typeof var) type)))

(define apply
  "Takes a fn and an arr and applies the elements of the array to the function as arguments."
  (macro (fn arr) `(~fn ~@arr)))

(define cond
  "Takes a set of test/expr pairs. It evaluates each test one at a
  time.  If a test returns logical true, cond evaluates and returns
  the value of the corresponding expr and doesn't evaluate any of the
  other tests or exprs."
  (macro (x ... rest)
    `(if ~(car x)
        ~(car (cdr x))
          (if ~(nil? rest)
            ()
            (cond ~@rest)))))

(define and
  "Evaluates arguments from left to right until it hits one that evaluates to false. If all of expressions evaluate to true, it will return true. Otherwise it will return false."
  (macro (x ... args)
    (if (nil? args)
      x
      `(if ~x (and ~@args) false))))

(define or
  "Evaluates arguments from left to right until it hits one that evaluates to true. If one of the expressions evaluate to true, it will return true. Otherwise it will return false."
  (macro (x ... args)
    (if (nil? args)
      x
      `(if ~x true (or ~@args)))))

(define has-nil?
  "Returns true if the passed-in list contains nil."
  (lambda (arr)
  (if (nil? arr)
    false
    (or (nil? (car arr)) (recur (cdr arr))))))

(define car'
  "Takes a list of lists, and maps car onto it."
  (lambda (arrs)
    (if (nil? arrs)
      nil
      (cons
        (car (car arrs))
        (recur (cdr arrs))))))

(define cdr'
  "Takes a list of lists, and maps cdr onto it."
  (lambda (arrs)
    (if (nil? arrs)
      nil
      (cons (cdr (car arrs)) (cdr' (cdr arrs))))))

(define foldr (lambda (fn base lst)
  (if (nil? lst)
    base
    (fn (recur fn base (cdr lst)) (car lst)))))

(define foldl (lambda (fn base lst)
  (if (nil? lst)
    base
    (recur fn
      (fn base (car lst))
      (cdr lst)))))

(define reverse
  "Reverses the passed-in list"
  (lambda (l) (foldl (lambda (acc v) (cons v acc)) nil l)))

(define concat (lambda (l1 l2)
  (reverse (foldl (lambda (acc v) (cons v acc)) (reverse l1) l2))))

(define filter (lambda (pred arr)
  (foldr (lambda (acc v)
    (if (pred v)
      (cons v acc)
      acc
    )
  ) '() arr)))

(define zero?
  "Returns true if the argument is equal to 0."
  (lambda (expr)
    (= 0 expr)))

(define not
  "Returns the negated argument. Equivalent to (if expr false true)"
  (lambda (expr)
    (if expr false true)))

(define second
  "Returns the second element of the passed-in list. Equivalent to (car (cdr lst))"
  (lambda (x)
    (car (cdr x))))

(define contain? (lambda (fn key arr)
   (foldr (lambda (acc v) (or acc (= key (fn v)))) false arr)))

(define len (lambda (coll)
  (foldr (lambda (acc _) (+ acc 1)) 0 coll)))

(define dedupe (lambda (arr) (foldr (lambda (acc x) (if (contain? identity x acc) acc (cons x acc))) '() arr)))

(define nth
  (lambda (lst n)
    (if (zero? n)
      (car lst)
      (recur (cdr lst) (- n 1)))))

(define remove-nth
  (lambda (list n)
    (if (zero? n)
      (cdr list)
      (cons (car list) (recur (cdr list) (- n 1))))))

(define last (lambda (lst)
  (cond
    ((nil? lst) lst)
    ((nil? (cdr lst)) (car lst))
    (true (recur (cdr lst))))))

(define do (lambda (... args) (last args)))

(define range (lambda (fst ... args)
  (if (nil? args)
    (range 0 fst)
    (if (= fst (car args))
      nil
      (cons fst (recur (+ 1 fst) (car args)))))))

(define even-len? (lambda (coll)
  (if (nil? coll)
    true
    (not (recur (cdr coll))))))

(define every-other-odd
  (lambda (coll)
    (if (nil? coll)
      ()
      (if (even-len? coll)
        (recur (cdr coll))
        (cons (car coll) (recur (cdr coll)))))))

(define every-other-even
  (lambda (coll)
    (if (nil? coll)
      ()
      (if (even-len? coll)
        (cons (car coll) (recur (cdr coll)))
        (recur (cdr coll))))))

(define let
  (macro (vars body)
    `((lambda ~(every-other-even vars) ~body) ~@(every-other-odd vars))))

(define ->>
  "Usage: (->> x ... funcs)
  Threads the expr through the lambdas. Inserts x as the last item in the first form, making a list of it if it is not a list already. If there are more forms, inserts the first form as the last item in second form, etc. (from clojuredocs)"
  (macro (data ... rest)
    `(cond
        (~(nil? rest) ~data)
        (~(nil? (cdr rest)) (~@(car rest) ~data))
        (true (recur (~@(car rest) ~data) ~@(cdr rest))))))

(define ->
  "Usage: (-> x ... forms)
  Threads the expr through the forms. Inserts x as the second item in the first form, making a list of it if it is not a list already. If there are more forms, inserts the first form as the second item in second form, etc. (from clojuredocs)"
  (macro (data ... rest)
    `(cond
        (~(nil? rest) ~data)
        (~(nil? (cdr rest)) (~(car (car rest)) ~data ~@(cdr (car rest))))
        (true (recur (~@(car rest) ~data) ~@(cdr rest))))))

(define assoc
  "Takes a map, a key and a value, and returns a map with the (key value) pair added to it  ."
    (let (hm-dedupe (lambda (map)
      (foldl (lambda (acc k)
        (if (contain? (lambda (e) (car e)) (car k) acc)
          acc
          (cons k acc)
        ) )
        '()
        map
      )
    ))
    (lambda (hmap key val)
            (let (m (hm-dedupe (cons (list key val) (hmap))))
                (lambda (... args)
                  (let (l (len args))
                    (cond ((= 0 l) m)
                          ((= 1 l) (foldr (lambda (acc v)
                                                  (if (= (car v) (car args))
                                                    (car (cdr v))
                                                    acc)) '() m)))))))))

(define make-map
  "Creates a map.  Can be followed by alternating keys and values to initialize it."
  (lambda (... init)
    (foldr (lambda (prevhm tup) (apply assoc (cons prevhm tup))) (lambda (... a) '()) init)))

(define dissoc
  "Takes a map and an arbitrary number of keys, and returns a map with the keys removed."
  (lambda (hmap ... keys)
    (let (m (filter (lambda (v) (not (contain? identity (car v) keys))) (hmap)))
      (lambda (... args)
            (let (l (len args))
              (cond ((= 0 l) m)
                    ((= 1 l) (foldr (lambda (acc v)
                                            (if (= (car v) (car args))
                                              (car (cdr v))
                                              acc)) '() m))))))))
